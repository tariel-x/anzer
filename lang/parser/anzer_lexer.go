// Code generated from Anzer.g4 by ANTLR 4.7.1. DO NOT EDIT.

package parser

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter

var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 18, 134,
	8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7,
	9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12,
	4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4,
	18, 9, 18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 3, 2,
	3, 2, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 4, 3, 4, 3, 5, 3, 5, 3, 6, 3, 6,
	3, 6, 3, 7, 3, 7, 3, 8, 3, 8, 3, 9, 3, 9, 3, 9, 3, 10, 3, 10, 3, 11, 3,
	11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 12, 3, 12, 3, 13, 3, 13, 3, 14,
	3, 14, 3, 15, 3, 15, 3, 16, 3, 16, 3, 17, 3, 17, 3, 18, 3, 18, 3, 18, 5,
	18, 91, 10, 18, 3, 19, 3, 19, 3, 19, 7, 19, 96, 10, 19, 12, 19, 14, 19,
	99, 11, 19, 3, 20, 3, 20, 3, 20, 7, 20, 104, 10, 20, 12, 20, 14, 20, 107,
	11, 20, 3, 21, 3, 21, 6, 21, 111, 10, 21, 13, 21, 14, 21, 112, 3, 21, 3,
	21, 6, 21, 117, 10, 21, 13, 21, 14, 21, 118, 3, 21, 3, 21, 3, 21, 6, 21,
	124, 10, 21, 13, 21, 14, 21, 125, 3, 22, 6, 22, 129, 10, 22, 13, 22, 14,
	22, 130, 3, 22, 3, 22, 2, 2, 23, 3, 3, 5, 4, 7, 5, 9, 6, 11, 7, 13, 8,
	15, 9, 17, 10, 19, 11, 21, 12, 23, 13, 25, 14, 27, 2, 29, 2, 31, 2, 33,
	2, 35, 2, 37, 15, 39, 16, 41, 17, 43, 18, 3, 2, 7, 5, 2, 67, 92, 97, 97,
	99, 124, 3, 2, 99, 124, 3, 2, 67, 92, 3, 2, 50, 59, 5, 2, 11, 12, 15, 15,
	34, 34, 2, 140, 2, 3, 3, 2, 2, 2, 2, 5, 3, 2, 2, 2, 2, 7, 3, 2, 2, 2, 2,
	9, 3, 2, 2, 2, 2, 11, 3, 2, 2, 2, 2, 13, 3, 2, 2, 2, 2, 15, 3, 2, 2, 2,
	2, 17, 3, 2, 2, 2, 2, 19, 3, 2, 2, 2, 2, 21, 3, 2, 2, 2, 2, 23, 3, 2, 2,
	2, 2, 25, 3, 2, 2, 2, 2, 37, 3, 2, 2, 2, 2, 39, 3, 2, 2, 2, 2, 41, 3, 2,
	2, 2, 2, 43, 3, 2, 2, 2, 3, 45, 3, 2, 2, 2, 5, 50, 3, 2, 2, 2, 7, 52, 3,
	2, 2, 2, 9, 54, 3, 2, 2, 2, 11, 56, 3, 2, 2, 2, 13, 59, 3, 2, 2, 2, 15,
	61, 3, 2, 2, 2, 17, 63, 3, 2, 2, 2, 19, 66, 3, 2, 2, 2, 21, 68, 3, 2, 2,
	2, 23, 75, 3, 2, 2, 2, 25, 77, 3, 2, 2, 2, 27, 79, 3, 2, 2, 2, 29, 81,
	3, 2, 2, 2, 31, 83, 3, 2, 2, 2, 33, 85, 3, 2, 2, 2, 35, 90, 3, 2, 2, 2,
	37, 92, 3, 2, 2, 2, 39, 100, 3, 2, 2, 2, 41, 110, 3, 2, 2, 2, 43, 128,
	3, 2, 2, 2, 45, 46, 7, 118, 2, 2, 46, 47, 7, 123, 2, 2, 47, 48, 7, 114,
	2, 2, 48, 49, 7, 103, 2, 2, 49, 4, 3, 2, 2, 2, 50, 51, 7, 63, 2, 2, 51,
	6, 3, 2, 2, 2, 52, 53, 7, 125, 2, 2, 53, 8, 3, 2, 2, 2, 54, 55, 7, 127,
	2, 2, 55, 10, 3, 2, 2, 2, 56, 57, 7, 60, 2, 2, 57, 58, 7, 60, 2, 2, 58,
	12, 3, 2, 2, 2, 59, 60, 7, 93, 2, 2, 60, 14, 3, 2, 2, 2, 61, 62, 7, 95,
	2, 2, 62, 16, 3, 2, 2, 2, 63, 64, 7, 47, 2, 2, 64, 65, 7, 64, 2, 2, 65,
	18, 3, 2, 2, 2, 66, 67, 7, 48, 2, 2, 67, 20, 3, 2, 2, 2, 68, 69, 7, 107,
	2, 2, 69, 70, 7, 112, 2, 2, 70, 71, 7, 120, 2, 2, 71, 72, 7, 113, 2, 2,
	72, 73, 7, 109, 2, 2, 73, 74, 7, 103, 2, 2, 74, 22, 3, 2, 2, 2, 75, 76,
	7, 42, 2, 2, 76, 24, 3, 2, 2, 2, 77, 78, 7, 43, 2, 2, 78, 26, 3, 2, 2,
	2, 79, 80, 9, 2, 2, 2, 80, 28, 3, 2, 2, 2, 81, 82, 9, 3, 2, 2, 82, 30,
	3, 2, 2, 2, 83, 84, 9, 4, 2, 2, 84, 32, 3, 2, 2, 2, 85, 86, 9, 5, 2, 2,
	86, 34, 3, 2, 2, 2, 87, 91, 7, 47, 2, 2, 88, 91, 5, 27, 14, 2, 89, 91,
	5, 33, 17, 2, 90, 87, 3, 2, 2, 2, 90, 88, 3, 2, 2, 2, 90, 89, 3, 2, 2,
	2, 91, 36, 3, 2, 2, 2, 92, 97, 5, 29, 15, 2, 93, 96, 5, 27, 14, 2, 94,
	96, 5, 33, 17, 2, 95, 93, 3, 2, 2, 2, 95, 94, 3, 2, 2, 2, 96, 99, 3, 2,
	2, 2, 97, 95, 3, 2, 2, 2, 97, 98, 3, 2, 2, 2, 98, 38, 3, 2, 2, 2, 99, 97,
	3, 2, 2, 2, 100, 105, 5, 31, 16, 2, 101, 104, 5, 27, 14, 2, 102, 104, 5,
	33, 17, 2, 103, 101, 3, 2, 2, 2, 103, 102, 3, 2, 2, 2, 104, 107, 3, 2,
	2, 2, 105, 103, 3, 2, 2, 2, 105, 106, 3, 2, 2, 2, 106, 40, 3, 2, 2, 2,
	107, 105, 3, 2, 2, 2, 108, 111, 5, 35, 18, 2, 109, 111, 7, 48, 2, 2, 110,
	108, 3, 2, 2, 2, 110, 109, 3, 2, 2, 2, 111, 112, 3, 2, 2, 2, 112, 110,
	3, 2, 2, 2, 112, 113, 3, 2, 2, 2, 113, 114, 3, 2, 2, 2, 114, 116, 7, 48,
	2, 2, 115, 117, 5, 27, 14, 2, 116, 115, 3, 2, 2, 2, 117, 118, 3, 2, 2,
	2, 118, 116, 3, 2, 2, 2, 118, 119, 3, 2, 2, 2, 119, 120, 3, 2, 2, 2, 120,
	123, 7, 49, 2, 2, 121, 124, 5, 35, 18, 2, 122, 124, 7, 49, 2, 2, 123, 121,
	3, 2, 2, 2, 123, 122, 3, 2, 2, 2, 124, 125, 3, 2, 2, 2, 125, 123, 3, 2,
	2, 2, 125, 126, 3, 2, 2, 2, 126, 42, 3, 2, 2, 2, 127, 129, 9, 6, 2, 2,
	128, 127, 3, 2, 2, 2, 129, 130, 3, 2, 2, 2, 130, 128, 3, 2, 2, 2, 130,
	131, 3, 2, 2, 2, 131, 132, 3, 2, 2, 2, 132, 133, 8, 22, 2, 2, 133, 44,
	3, 2, 2, 2, 14, 2, 90, 95, 97, 103, 105, 110, 112, 118, 123, 125, 130,
	3, 8, 2, 2,
}

var lexerDeserializer = antlr.NewATNDeserializer(nil)
var lexerAtn = lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE",
}

var lexerLiteralNames = []string{
	"", "'type'", "'='", "'{'", "'}'", "'::'", "'['", "']'", "'->'", "'.'",
	"'invoke'", "'('", "')'",
}

var lexerSymbolicNames = []string{
	"", "", "", "", "", "", "", "", "", "", "", "", "", "LowIdent", "UpperIdent",
	"URL", "WS",
}

var lexerRuleNames = []string{
	"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8",
	"T__9", "T__10", "T__11", "Letter", "LowLetter", "UpperLetter", "DecimalDigit",
	"Urlpart", "LowIdent", "UpperIdent", "URL", "WS",
}

type AnzerLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var lexerDecisionToDFA = make([]*antlr.DFA, len(lexerAtn.DecisionToState))

func init() {
	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

func NewAnzerLexer(input antlr.CharStream) *AnzerLexer {

	l := new(AnzerLexer)

	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.channelNames = lexerChannelNames
	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "Anzer.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// AnzerLexer tokens.
const (
	AnzerLexerT__0       = 1
	AnzerLexerT__1       = 2
	AnzerLexerT__2       = 3
	AnzerLexerT__3       = 4
	AnzerLexerT__4       = 5
	AnzerLexerT__5       = 6
	AnzerLexerT__6       = 7
	AnzerLexerT__7       = 8
	AnzerLexerT__8       = 9
	AnzerLexerT__9       = 10
	AnzerLexerT__10      = 11
	AnzerLexerT__11      = 12
	AnzerLexerLowIdent   = 13
	AnzerLexerUpperIdent = 14
	AnzerLexerURL        = 15
	AnzerLexerWS         = 16
)
